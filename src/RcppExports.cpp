// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// CPP_computing_kernel
Rcpp::NumericMatrix CPP_computing_kernel(const std::vector<std::string>& x, const unsigned long long& max_kmer_length, const double exponential);
RcppExport SEXP _kernelForLeon_CPP_computing_kernel(SEXP xSEXP, SEXP max_kmer_lengthSEXP, SEXP exponentialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const unsigned long long& >::type max_kmer_length(max_kmer_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type exponential(exponentialSEXP);
    rcpp_result_gen = Rcpp::wrap(CPP_computing_kernel(x, max_kmer_length, exponential));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_kernelForLeon_CPP_computing_kernel", (DL_FUNC) &_kernelForLeon_CPP_computing_kernel, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_kernelForLeon(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
